// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
M=0
@SP
M=M-1
A=M
D=M-D
@VMeqSetTrueSym0
D;JEQ
@VMeqSetFalseSym0
0;JMP
(VMeqSetFalseSym0)
D=0
@VMeqEndOfFunctionSym0
0;JMP
(VMeqSetTrueSym0)
D=-1
@VMeqEndOfFunctionSym0
0;JMP
(VMeqEndOfFunctionSym0)
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
M=0
@SP
M=M-1
A=M
D=M-D
@VMeqSetTrueSym1
D;JEQ
@VMeqSetFalseSym1
0;JMP
(VMeqSetFalseSym1)
D=0
@VMeqEndOfFunctionSym1
0;JMP
(VMeqSetTrueSym1)
D=-1
@VMeqEndOfFunctionSym1
0;JMP
(VMeqEndOfFunctionSym1)
@SP
A=M
M=D
@SP
M=M+1
// push constant 1
@1
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
M=0
@SP
M=M-1
A=M
D=M-D
@VMeqSetTrueSym2
D;JEQ
@VMeqSetFalseSym2
0;JMP
(VMeqSetFalseSym2)
D=0
@VMeqEndOfFunctionSym2
0;JMP
(VMeqSetTrueSym2)
D=-1
@VMeqEndOfFunctionSym2
0;JMP
(VMeqEndOfFunctionSym2)
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// push constant 2
@2
D=A
@SP
A=M
M=D
@SP
M=M+1
// eq
@SP
M=M-1
A=M
D=M
M=0
@SP
M=M-1
A=M
D=M-D
@VMeqSetTrueSym3
D;JEQ
@VMeqSetFalseSym3
0;JMP
(VMeqSetFalseSym3)
D=0
@VMeqEndOfFunctionSym3
0;JMP
(VMeqSetTrueSym3)
D=-1
@VMeqEndOfFunctionSym3
0;JMP
(VMeqEndOfFunctionSym3)
@SP
A=M
M=D
@SP
M=M+1
